born2be-mandatory

[ ] 가상머신이 어떻게 작동하는가
>
• Host machine
• Hypervisor
• Guest Machine, Guest OS
• Virtual Hardware

- Host Machine
가상머신을 실제로 구동할 물리 컴퓨터를 의미. CPU, Memory, Disk 등의 실제 하드웨어 자원이 존재함

- Hypervisor(not both, choose type)
가상머신을 생성,관리하는 소프트웨어 계층으로, 물리 하드웨어와 가상머신 (OS 및 애플리케이션) 사이에서 자원의 사용을 조율한다.

∘ Type1(네이티브, 베어메탈) 하이퍼바이저 : 물리머신 위에 직접 설치되어 동작한다. 
∘ Type2(호스트 기반) 하이퍼바이저 : 호스트 OS위에 설치되어 동작한다. 

- Guest Machine
가상머신에 설치된 운영체제를 말한다. 게스트 OS는 호스트 머신의 하드웨어가 아닌, 하이퍼바이저가 가상으로 제공하는 하드웨어를 사용한다.


- Virtual Hardware
cpu, memory, 저장장치, NIC 등의 자원을 가상화해서 게스트 OS가 마치 실제 하드웨어처럼 접근할 수 있도록 한다.



>>물리적 컴퓨터의 디지털버전



[ ] 자신이 선택한 운영체제( OS )는 무엇이며, 왜 그 OS를 선택했는지

Windows, macOS, Linux, IOS&Android, 기타/특수 목적 OS

windows는 폭넓은 소프트웨어 호환성이 장점임.
macOS는 연동성이 뛰어남. unix 기반
Linux는 오픈소스 커널을 기반으로 하는 다양한 배포판이 존재. 서버, 슈퍼컴퓨터, 임베디드 기기 등 다양한 용도에서 활용되고, 커뮤니티 생태계가 매우 활발함


세 OS의 특징이고, 이 중에서 windows를 고른다고 하면, 호환성이 장점이지만 라이센스 제약이 많고 트러블슈팅이 까다로움
macOS와 Linux 중 서버운영과 관련된 문서, 가이드, 커뮤니티가 더 풍부한 Linux를 선택한다. (익숙하기도 하기 때문)

macOS는 apple 연동성이 뛰어나지만 해당 하드웨어가 필수적이기 때문.

또한 Linux는 서버나 클라우드 환경에서 가장 널리 사용되기 때문.




[ ] Rocky와 Debian의 차이점

rocky 	- 주로 기업 환경에 사용될 목적, 비교적 복잡한 GUI, 제한된 수의 공식 패키지, Red Hat 커뮤니티에서 주로 지원
debian - 넓은 사용자 베이스를 위한 일반 용도, 사용자 친화적인 GUI 및 응용 프로그램, 방대한 양의 패키지 보유, 주로 개인 및 자원봉사자 커뮤니티에서 지원




[ ] 가상머신의 목적
>
하드웨어 자원을 가상화하여, 여러개의 독립된 컴퓨터 환경을 한 물리머신 위에서 운용할 수 있게 하는 것

이를 통해
1. 자원 효율성 - 한대의 물리 서버 위에서 여러 운영체제를 동시에 구동, cpu, memory, disk 등 자원을 효율적으로 활용할 수 있음

2. 격리(독립성) - 가상머신마다 고유한 환경을 가추어 서로 영향을 주지 않도록 격리한다. 한 가상머신이 다운되거나 문제가 생겨도 다른 가상머신이나 호스							
				    트 서버에 영향을 최소화할 수 있음

3. 유연한 개발, 테스트 환경 - 다양한 운영체제와 소프트웨어 스택을 동일 물리 서버에 빠르게 설치,삭제,재구성할 수 있어서 개발 및 테스트 환경을 쉽게 구
								축하고 복제할 수 있음

4. 비용 절감 - 서버 통합을 통해 물리적인 하드웨어 수를 줄이고, 운용,전력,공간 비용을 절감할 수 있음

5. 백업 및 복구 용이성 - VM 이미지를 스냅샷 또는 파일 형태로 간편하게 백업하고, 문제가 생기면 스냅샷 시점으로 쉽게 복구할 수 있음

6. 보안성 및 격리 - 민감한 애플리케이션을 별도의 VM에 격리하여 보안성을 높이거나, 실험적인 소프트웨어를 분리된 공간에서 테스트할 수 있어 위험을 
 					최소화할 수 있음

7. 클라우드 컴퓨팅 기반 - 퍼블릭, 프라이빗 클라우드 서비스의 핵심 기술로서, 온디맨드(필요 시 확장/축소) 인프라 제공이 가능해짐


결국, 가상머신의 목적은 물리 하드웨어를 가상화해 독립적인 시스템 환경을 효율적으로 운용할 수 있도록 함으로써, 
IT 자원을 보다 유연하고 안정적이며 경제적으로 관리,활용하기 위함임




[ ] (Debian을 선택한 경우) aptitude와 apt의 차이점, 그리고 APPArmor가 무엇인지

aptitude : 
• 초창기부터 존재하던 패키지 관리자
• 명령줄 기반뿐 아니라, 텍스트 사용자 인터페이스(TUI)를 제공해, 메뉴를 통해 설치, 제거, 검색 등을 직관적으로 관리할 수 있음
• 의존성 해결(Dependencies) 로직이 뛰어나며, 다양한 설정 옵션을 갖추고 있음


apt : 
• Debian8 무렵부터 등장한 새로운 통합 인터페이스임
• 기존에 분리되어 있던 apt-get, apt-cache 등의 기능을 좀 더 단순화/통합하여 사용자 친화적인 명령어를 제공하고자 만들어졌음
• CLI 환경에서의 사용 편의를 강화하고 출력 메시지를 좀 더 보기 좋게 정돈함


aptitude = 고급 사용자용, 텍스트 기반 UI 제공, 더 세밀하고 강력한 의존성 해결 능력
apt		   = 모던하고 간결한 CLI 명렁어 집합(가장 많이 쓰이는 형태), 일상적 시스템 관리에 적합




AppAmor : Application Armor, 리눅스 보안을 강화하기 위한 강제 접근 제어(MAC : Mandatory Access Control)시스템 중 하나임

어플리케이션에 대한 파일 접근 권한, 네트워크 액세스, 시스템콜 등을 plicy로 정의하여, 해당 프로세스가 허용되지 않은 자원에 접근하지 못하도록 제한한다. 

>>'경로 기반 MAC 시스템으로, 프로세스별로 "어떤 경로에 접근할 수 있는지"를 정책(프로필)으로 정의해 보안을 강화하는 리눅스 커널 기능이다.'




|===============|=========================|================================|============================|

SIMPLE SETUP

[ ] GUI(그래픽 환경) 비활성화

초기 부팅 시 그래픽 환경이 실행되지 않아야 하며, **CLI 모드(텍스트 콘솔)**로 시작되어야 합니다.


cli모드 = 그래픽 환경을 사용하지 않고 문자 기반 터미널을 통해 운영체제를 조작하는 방식을 말한다.




[ ] 접속 전 비밀번호 요구

가상머신에 SSH나 콘솔로 접속할 때, 사용자 인증(비밀번호 입력)이 필수여야 합니다.
즉, 비밀번호 없이 자동 로그인되는 설정은 안 됩니다.



[ ] 루트 사용자가 아닌 다른 사용자로 로그인

root 계정으로 직접 로그인하는 것이 아닌, 별도의 일반 사용자 계정으로 접속해야 합니다.
이 계정은 평가 대상 학생이 접속(도움)을 줄 때 사용하는 계정입니다.

passwd -e username		: 비밀번호 만료기간 강제 적용, 다음 로그인 시 비밀번호를 변경해야함.
sudo chage -d $(date +%F) username		: 만료상태 취소.


[ ] 사용자 비밀번호 규칙 준수

과제에서 요구하는 비밀번호 복잡도(길이, 문자 종류, 만료 규칙 등) 정책을 따라야 합니다.
일반적으로 대문자·소문자·숫자·특수문자 조합 및 최소 길이를 설정합니다.

vim /etc/pam.d/common-pasword

retry : 다시시도 횟수
minlen : 최소 길이
ucredit : 대문자 개수, -1은 최소 1개의 대문자 포함요구
dcredit : 숫자 개수, -2는 최소 2개
maxrepeat : 문자 반복 허용 개수, 3은 3개까지는 허용, 4개부터 거부
reject_username : 비밀번호에 username이 포함되면 거부
enforce_for_root : 루트 사용자에게도 동일한 비밀번호 정책을 강제 적용
difok : 이전 비밀번호와 얼마나 달라야 하는지, 4일 경우, 최소 4개의 문자가 달라야 함.




[ ] UFW(데비안) 혹은 Firewalld(록키) 서비스 활성화

데비안을 선택했다면 UFW가 활성화되어야 하고,
Rocky Linux를 선택했다면 Firewalld가 활성화되어야 합니다.
각각 현재 상태(sudo ufw status, sudo systemctl status firewalld)를 확인하세요.


Debian : sudo ufw status
Rocky 	 : sudo systemctl status firewalld



 [ ] SSH 서비스 활성화

원격 접속 테스트를 위해 SSH 서비스가 켜져 있어야 합니다.
명령어 예시: systemctl status ssh (Debian 계열) / systemctl status sshd (RHEL 계열)


Debian : systemctl status ssh
Rocky	: systemctl status sshd



[ ] 운영체제 확인

Debian 또는 Rocky Linux 중 어떤 OS인지 확인해야 합니다.
예)
Debian: /etc/os-release 파일에서 ID=debian 또는 PRETTY_NAME="Debian ..." 등을 확인
Rocky: /etc/os-release에 ID="rocky" 혹은 NAME="Rocky Linux" 등이 표시됨


cat /etc/os-release




|===============|=========================|================================|============================|

User(사용자)

[ ] 과제에서 요구하는대로, 평가대상 학생의 아이디("id")로 된 사용자가 가상머신 안에 존재하는지 확인해라.
그리고 이 사용자가 "sudo"와 "user42" 그룹에 속해 있는지도 확인해라
>>
(sudo) groupadd user42 							== user42 라는 이름의 그룹을 만든다.
(sudo) usermod -aG sudo,user42 (사용자 이름) 	== 지정한 사용자를 sudo, user42라는 그룹에 추가한다. sudo 명령어를 사용할 수 있게됨, 해당 그룹에 			
														대한 접근 권한을 부여받는다.
(sudo) usermod -g user42 (사용자 이름)			== 지정한 사용자의 기본(주) 그룹을 user42로 변경한다.



[ ] 비밀번호 정책 : 과제에서 요구하는 패스워드 정책이 적용되었는지 확인해야한다.
1. 새 사용자를 만들어라 : 과제 규칙을 준수하는 비밀번호를 임의로 설정해라.
2. 평가대상 학생에게, 이 패스워드 정책을 VM 내에서 어떻게 설정했는지 설명하도록 요청해라. 
>>
만들어질 때 잘못 만들어진다면 (crontab의 영향을 받아 작업이 이상해진다면)

getent passwd				: 모든 사용자 정보 확인
sudo deluser (사용자 이름)	: 지정한 사용자 계정을 삭제
sudo deluser --remove-home (사용자 이름) : 홈 디렉토리와 메일 스풀 등도 함께 삭제.


[ ] 사용자 만들기
groups (사용자 이름) : 사용자 그룹 확인

sudo adduser (사용자 이름)
sudo groupadd evaluating : evaluating이라는 그룹을 만든다.
sudo usermod -aG evaluating (사용자 이름) : 지정한 사용자를 evaluating 그룹에 추가한다.


[ ] 비밀번호 정책의 장점과 단점
>>
장점 : 강력한 비밀번호 정책은 무작위 대입 공격이나 사전 공격에 대한 보안 강화, 사용자 계정 보호
단점 : 복잡한 비밀번호는 사용자의 기억 부담 증가, 비밀번호 재설정 빈도 상승, 관리 비용 증가



groups (사용자 이름)

|===============|=========================|================================|============================|
Hostname and partitions

[ ] 가상머신의 호스트 네임이 (si-park42 )로 되어 있는지 확인
> hostname


[ ] hostname의 (사용자이름+42) 지정한 사용자 이름을 평가 대상의 ID로 변경. 이후 재부팅

> sudo hostnamectl set-hostname (새 호스트 이름)

이후, hostname 확인 시 바뀐 호스트네임으로 설정되어 있는지 재부팅 후 확인.


명령어 사용 이후에 
sudo: unable to resolve host eval42: Temporary failure in name resolution
이 명령어가 나오는 이유는, 호스트네임이 /etc/hosts 파일을 사용하는데 이 파일과 호스트네임이 매칭되지 않으면 이 메시지가 뜨는 것.

따라서 호스트네임을 변경한 이후에, hosts를 같이 업데이트를 해줘야한다.

vim /etc/hosts



[ ] 원래 호스트네임으로 복원
> 위와 동일



[ ] 이 가상머신의 파티션 정보를 어떻게 볼 수 있는가?
> 
가상머신의 파티션 : 

• 가상 디스크 : 실제 물리 디스크 대신 가상 디스크 파일을 사용하는데, 호스트 OS 내의 하나의 파일로 존재하며 내부에는 물리적 디스크와 동일한 방식으로 파티션 테이블과 데이터가 저장된다.

• 파티션 : 가상 디스크 내에서 특정 영역을 논리적으로 분리해 운영체제, 데이터 등을 저장하는 단위. 파티션은 MBR( Master Boot Record )나 
		GPT( GUID Partition Table ) 등의 방식으로 관리됨.

가상 머신 내 운영체제는 물리적 컴퓨터와 마찬가지로 디스크 파티션을 생성, 수정 삭제 및 관리할 수 있음



sudo fdisk -l	: 모든 디스크와 그 파티션 정보를 출력
lsblk			: 블록 디바이스와 마운트 정보를 계층적으로 보여줌. 디스크와 파티션 구조를 쉽게 확인할 수 있는 방법.



[ ] 출력 결과가 과제 예시와 일치하는지 확인, 보너스를 했다면 보너스 예시와 일치하는지 확인.
위와 동일.





[ ] 이 파트에서 LVM( Logical Volume Manager )의 작동 방식과 의미를 간략히 설명해라.
> 
LVM : 물리적인 디스크 파티션을 논리적 볼륨으로 추상화하여 관리하는 시스템. 이를 통해 디스크 공간을 유동적으로 할당, 확장, 축소할 수 있으며 스냅샷을 만드는 등의 고급 기능을 제공한다.


PV ( physical volume )  : 기존에 만들어진 파티션이나 전체 디스크를 LVM 에서 사용할 수 있도록 "초기화"하는 과정.

VG ( volume group )	: pv를 모아서 만든 공간.

( placement )

LV ( Logical Volume )	: VG를 논리적으로 분할하여 사용자가 데이터를 저장하고 접근할 수 있는 공간으로 만들어준다.





fdisk 명령어로 파티션 구분 가능, 
https://rlahjxx.tistory.com/14
https://minha0220.tistory.com/31



|===============|=========================|================================|============================|
SUDO

[ ] sudo 프로그램이 가상머신에 올바르게 설치되어 있는지 확인

which sudo
>>vim /usr/bin/sudo


[ ] 새로 만든 사용자에게 "sudo" 그룹을 할당해라
>
information : 
groups (사용자 이름), 
groupdel (그룹 이름), 
useradd (사용자이름), 
userdel (사용자 이름), 
getent passwd


"	"	"
(sudo) groupadd (그룹 이름)
(sudo) usermod -aG sudo (사용자 이름)
"	"	"



[ ] sudo의 가치와 동작 방식을 예시를 들어 설명해라.
sudo : superuser do
일반 사용자에게 제한된 범위 내에서 관리자 권한의 명령을 실행할 수 있도록 하는 도구.
시스템 보안 강화, 무분별한 root 접근 통제, 실행된 명령어 로깅하여 추적


ex. sudo 사용 시 비밀번호 요구, 로그 기록 활성화 및 검토


/etc/sudoers 를 수정하면 되는데, visudo 명령어를 사용할 경우 문법 오류를 검토해주기 때문에 visudo 사용 권장



[ ] 과제에서 요구한대로 엄격한 규칙들을 어떻게 구현했는지
> 
visudo, 명령어 설명


Authentication using sudo has to be limited to 3 attempts in the event of an incorrect password.
잘못된 비밀번호 입력 시, sudo 인증 시도가 최대 3회. 이후에는 추가 인증시도 제한.
>> Defaults    passwd_tries=3


"A custom message of your choice has to be displayed if an error due to a wrong password occurs when using sudo."
비밀번호 오류 시, 메시지 표시.
>>Defaults    badpass_message="사용자 정의 오류 메시지"


"Each action using sudo has to be archived, both inputs and outputs. The log file has to be saved in the /var/log/sudo/ folder."
sudo를 통해 수행되는 모든 작업은 /var/log/sudo 에 입력과 출력 모두 기록되어야 한다.
>>
Defaults    log_input
Defaults    log_output


"The TTY mode has to be enabled for security reasons."
보안상의 이유로 sudo 명령어는 반드시 터미널 환경에서 실행되어야 한다. (터미널 없이 백그라운드나 스크립트 등에서 sudo 사용을 제한한다.)
>> Defaults    requiretty
tty 변경 : alt + F1 ~ F6 or window + →, ←


"For security reasons too, the paths that can be used by sudo must be restricted.
Example: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"
보안상의 이유로, sudo를 통해 실행할 수 있는 명령어의 경로가 제한되어야 한다. 위 경로 외의 디렉토리에 있는 프로그램은 sudo로 실행되지 않아야 한다.
>> Defaults    secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin"




[ ] /var/log/sudo 폴더가 존재하며, 안에 최소 하나 이상의 파일이 있는지 확인
• 내역 확인
• sudo 명령어를 실행하고 /var/log/sudo 폴더의 파일이 업데이트 되는지 확인






|===============|=========================|================================|============================|

UFW / Firewalld

[ ] UFW 가 가상머신에 올바르게 설치되어 있는지 확인.
> (sudo) ufw status


[ ] 이 방화벽 서비스가 정상적으로 동작하는지 확인
> (sudo) ufw status verbose


[ ] UFW가 뭔지, 그리고 이를 사용하는 이유를 간단하게 설명
> 리눅스 방화벽, linux에는 기본으로 제공하는 iptables가 있는데 ufw가 이보다 훨씬 쉽고 직관적이다. 성능차이도 거의 없음.

네트워크 트래픽을 제어하여 보안을 강화하기 위해 사용.


[ ] 활성화된 방화벽 규칙 확인, (4242 port)
> ufw status


[ ] 새 규칙을 추가하여 8080 포트를 열어라. 정상적으로 추가되었는지 확인
> (sudo) ufw allow (포트 넘버)


[ ] 추가한 규칙을 제거해라.
> (sudo)ufw delete allow (포트 넘버)



|===============|=========================|================================|============================|
SSH

[ ] SSH가 가상머신에 설치되어 있는지 확인
>
(which sshd)
sudo systemctl status ssh



[ ] ssh가 정상적으로 동작하는가
> sudo systemctl status sshd



[ ] ssh가 무엇이고, 사용하는 이유가 무엇인지 간단히 설명
> secure shell protocol, FTP/ telnet 에 비해 보안에 초점을 맞춘 프로토콜
두 컴퓨터 간에 안전하게 통신하기 위한 프로토콜임

(프로토콜 : https, http, tcp, udp, ip, ftp, smtp ' ' ' )


데이터 암호화와 강력한 인증을 통해 접속 시 보안을 유지하기 위함



[ ] ssh 서비스가 가상머신에서 4242포트만 사용하도록 설정되어 있는지 확인
> 
vim /etc/ssh/sshd_config




[ ] 앞서 만든 새 사용자로 ssh 접속을 시도해라. 기 기반 인증 또는 단순 비밀번호 인증 중 무엇을 사용할지는 평가 대상 학생에게 달려 있다.
> 
useradd (사용자 이름), 명령어를 통해 유저를 만든 뒤, 비밀번호를 따로 지정해주어야한다.
(sudo) passwd (사용자 이름) : 비밀번호 재설정



(만약, test1 계정으로 로그인 한 뒤, root 계정으로 돌아오고 싶다면 su - )



,,

터미널에서 
ssh (사용자 이름)@(ip) -p 4242

터미널에서 ifconfig으로 포트포워딩을 통해 추가했던 vboxnet0의 정보를 알 수 있다. (inet)

해당 ip를 ssh 명령어를 통해 원격으로 접속 시도하면 된다.


이후 사용자의 이름을 root 로 로그인 시도 시, password가 틀렸다고 나오는 오류 메시지가 정답임.









|===============|=========================|================================|============================|
Script Monitoring

[ ] 본인이 작성한 스크립트가 어떻게 동작하는지(코드를 보여주며) 간단히 설명.


• monitoring.sh

-The architecture of your operating system and its kernel version.
: 운영 체제의 아키텍처(예: x86_64, ARM 등)와 커널 버전을 확인.
uname -a

The number of physical processors.
: 서버에 장착된 물리적 프로세서(CPU)의 개수 출력
nproc --all

The number of virtual processors.
: 가상 환경에서 할당된 가상 프로세서(vCPU)의 개수 출력
cat /proc/cpuinfo | grep processor | wc -l

The current available RAM on your server and its utilization rate as a percentage.
: 서버에서 현재 사용 가능한 RAM 용량과 그 사용률을 백분율로 나타내라
free -m | grep Mem | awk '{printf"%d/%dMB (%.2f%%)\n", $3, $2, $3/$2 * 100}'

The current available storage on your server and its utilization rate as a percentage.
: 서버에서 현재 사용 가능한 저장 공간(디스크 용량)과 그 사용률을 백분율로 나타내라
df -a -BM | grep /dev/map | awk '{sum+=$3}END{print sum}' | tr -d '\n'

The current utilization rate of your processors as a percentage.
: 프로세서(CPU)의 현재 사용률을 백분율로 나타내라
df -a -BM | grep /dev/map | awk '{sum+=$4}END{print sum}' | tr -d '\n'

The date and time of the last reboot.
: 서버가 마지막으로 재부팅된 날짜와 시간을 확인
df -a -BM | grep /dev/map | awk '{sum1+=$3 ; sum2+=$4 }END{printf "%d", sum1 / sum2 * 100}' | tr -d '\n'

Whether LVM is active or not.
: Logical Volume Manager(LVM)가 활성화되어 있는지 여부를 확인
mpstat | grep all | awk '{printf "%.2f%%\n", 100-$13}'

The number of active connections.
: 현재 서버에 활성화된 네트워크 연결의 수
ss | grep -i tcp | wc -l | tr -d '\n'

The number of users using the server.
: 현재 서버에 로그인하여 사용 중인 사용자 수
who | wc -l

The IPv4 address of your server and its MAC (Media Access Control) address.
: 서버의 IPv4 주소와 MAC(Media Access Control) 주소를 확인해라
hostname -I | tr -d '\n'
ip link show | awk '$1 == "link/ether" {print $2}' | sed '2, $d' | tr -d '\n'

The number of commands executed with the sudo program.
: sudo 프로그램을 사용하여 실행된 명령의 횟수
journalctl _COMM=sudo | wc -l | tr -d '\n'



>> bash monitoring.sh




[ ] cron이 무엇인가
> cron을 관리하는 table
윈도우의 작업 스케쥴러가 리눅스의 cron


crontab -e 를 통해 설정 가능.


* * * * *
왼쪽부터 차례대로

분		0 - 59
시간	0 - 23
일 		1 - 31
월		1 - 12
요일	1 - 7


* 	: 모든 값. 예: * * * * *는 매 분마다 실행.
, 	: 값 목록 지정. 예: 1,15,30 * * * *는 매 시간 1분, 15분, 30분에 실행.
- 	: 범위 지정. 예: 0-5 * * * *는 매 시간 0~5분에 실행.
/ 	: 스텝 값 지정. 예: */10 * * * *는 매 10분마다 실행.



[ ] 서버가 시작되었을 때, 스크립트가 더이상 실행되지 않도록 해라. ( 스크립트를 수정하지 않은 채 ). 감시스크립트
crontab -e

> systemctl status cron
systemctl stop cron
systemctl disable cron

or

systemctl enable cron
systemctl start cron

>> 스크립트를 수정하지 않아야 하기 때문에, systemctl 명령어를 사용한다. 외에도 ufw나 ssh의 상태를 체크하거나 할 때에도 systemctl을 사용한다. 추가적인 내용은 systemctl의 옵션을 참고할 것.



journalctl __COMM=sudo
>> sudo 명령어를 사용한 로그를 보는 기능, 기존에는 이 명령어를 그냥 사용했기 때문에 로그가 3개씩 증가하던 현상이 발생, | grep 'COMMAND=' | 추가로 command 를 출력하는 라인 한 줄만 체크하여 1개씩 센다.


vim /etc/pam.d/common-password
>> lcredit 추가.

vim /etc/login.def
>> 명령어를 잊지 않을 것. 비밀번호 정책은 여기에도 추가해야한다. (MAX DAYS, MIN DAYS, ALERT 등) 




'''
rocky와 debian의 차이 > 

red hat linux > cent os > rocky linux
유료와 무료 버전이 있던 레드햇 리눅스에서 유료만을 사용한다고 발표. but, 라이선스 특성 상 유료버전이어도 오픈소스여야함. 때문에 여러가지 배포판이 많았는데,
레드햇 리눅스의 배포판이 센트os, 

후에 센트os가 버전을 더이상 내지 않겠다고 발표, 센트os의 초창이 개발자와 다른 사람들이 모여서 만든 정신적 계승자가 rocky linux가 된 것.

(유료 버전의 레드햇 리눅스를 사용한다면 정식으로 a/s를 받을 수 있었기 때문에 금전적 여유가 있던 기업들은 유료로 레드햇을 사용했었음.)


>> 유료버전의 리눅스였고, 기업들이 주로 사용해왔기 때문에 기업이 사용하기에 특화되어서 발전되어 왔음. 



debian = community 기반, 따라서 일반 사용자가 사용하기에 더 특화되어 있는 것.




가상머신은 물리적 하드웨어 공간이 한정적이라면, 여러가지 환경에서 테스트할 때 주로 사용한다.
의미 없다고 생각했었지만, 그 안에서 rocky와 debian의 차이점을 파보는 것은 다소 의미가 있는 일이었던 것. 

리눅스에 대해 더 파보는 것이나 역사에 대해 알아보는 것이 취향이 맞았던 듯 하다.
부정적인 경험이라 생각했지만, 그때 당시의 내가 부정적이었기 때문에 그렇다고 생각했던 것. 
3개의 outstanding을 받는 것은 어렵지 않았다. 자연스럽게 이루어졌고 앞으로도 그런식으로 정보를 받아들여야 한다.

과제를 풀기 위한 것이 아닌 내것으로 만들기 위한 코딩은 계속되어야 한다.






born2be-for eval













