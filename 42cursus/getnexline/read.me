Getnextline


char *get_next_line(int fd);

매개변수
fd : 읽어들일 파일 디스크립터

반환 값
읽은 줄 : 올바른 동작 시
NULL : 더 이상 읽을 내용이 없거나 오류 발생 시.

외부 함수
read, malloc, free





파일 디스크립터 :
리눅스 시스템에서 파일이나 기타 input, output 자원에 접근하기 위한 핸들 또는 식별자로 사용되는 정수.




perror > 확실한 오류 : malloc실패, 메시지 오류?
인자를 받지 않는 경우는 잡아줄 수 없음. exit 케이스를 따로 만들어야 함.



ssiez_t 변수 = read();
>> read를 했을 때 나오는 값이 1,0,-1이기 때문에 부호를 사용 가능한 ssize_t를 사용해야한다.

부호를 사용가능한 다른 자료형이 있는데 왜 size_t를?
>> ssize_t는 시스템에 따라 크기가 변하는 자료형이기 때문이다.

64비트에서는 ssize_t가 long 크기(8바이트)가 될 수 있기 때문.

즉 파일이나 네트워크에서 큰 데이터를 처리할 때, int보다 ssize_t가 더 안전하다.






일반적으로 변수는 자신이 정의된 지역을 빠져나갈 때 파괴된다. 

int *function() {
	int a = 2;
	return &a;
}

int main() {
	int *pa = function();
	printf("%d\n", *pa);
}


컴파일하여 실행한다면
segmentation fault( core dumped ).



사실 컴파일 시에 나오는 경고 메시지가 나오는데,

test.c: In function ‘function’:
test.c:5:10: warning: function returns address of local variable [-Wreturn-local-addr]
   return &a;
          ^~


>> 지역변수의 주소값을 리턴한다고 경고한다.


코드를 다시 살펴보면,
int *function() {
	int a = 2;
	return &a;
}

int main() {
	int *pa = function();
	printf("%d\n", *pa);
}


int a는 function 이라는 함수 안에서 선언되었기 때문에, 함수를 빠져나가면 그 안에서 선언된 변수도 사라진다.
이는 지역변수임을 의미하고, 이는 main에서 이미 사라진 지역변수를 불러오려 하기 때문에 오류가 발생하는 것.

그렇다면 지역을 빠져나가도 파괴되지 않는 변수는 없는가?
>> static variable. 정적 변수


int *function(){
	static int a = 2;
	return &a;
}

int main(){
	int *pa = function();
	printf("%d\n", *pa);
}

• 실행결과:
	2


잘 나오는 모습이다.
이 정적 변수는 자신이 선언된 범위를 벗어나더라도 절대로 파괴되지 않는다.

그렇다면 function을 여러번 출력한다면 어떻게 되는가? a가 계속해서 2로 초기화 되는 것 아닌가?
>> a는 한번만 초기화된다. static int a = 2 라는 문자은 단 한번만 실행된다. 





데이터 세그먼트의 구조
https://modoocode.com/83

c언어 자체적으로 스택과 힙 영역을 따로 구분하지 않는다. but, 대부분의 운영체제에서 프로그램을 실행하면 힙과 스택 영역을 구분해서 만들게 된다.

프로그램이 실행될 때 프로그램은 RAM에 적재된다. 프로그램의 모든 내용이 RAM 위로 올라오게 된다는 것.
( 프로그램의 모든 내용 : 프로그램의 코드, 프로그램의 데이터를 모두 의미한다. )

이렇게 RAM 위로 올라오는 프로그램의 내용을 크게 나눠서 코드 세그먼트(Code Segment)와 데이터 세그먼트(Data Segment) 로 분류할 수 있다.

중점적으로 봐야할 건 세그먼트이다.

읽기전용 : 출력된 주소값들 중 가장 작게 나온다. 데이터 세그먼트 맨 아래에 위치해 있기 때문.
전역변수 : str보다는 크지만 다른 것들 보다는 작다. 전역변수로 데이터 영역에 위치해 있기 때문. 정적변수도 여기에 위치한다.
지역변수 : 스택에 저장되기 때문에, 지역변수가 많아지면 주소값은 점점 작아진다.




READ함수
#include <unistd.h>
read( int fd, void *buf, size_t nbytes );

inf fd 			: 읽을 파일의 파일 디스크립터
void *buf 		: 읽어들인 데이터를 저장할 버퍼(배열)
size_t nbytes 	: 읽어들일 데이터의 최대 길이(buf의 길이보다 길어선 안됨)
반환값 			: 읽어들인 데이터의 길이. 무조건 nbytes가 리턴되는 것은 아님. 중간에 파일의 끝을 만난다면 거기까지만 읽기 때문

read함수에서 반환값이 0이라면 EOF, 파일의 끝에 도달했다는 뜻.


OPEN함수
#include <fcntl.h>
int open ( const char *filepath, int flag );
int open ( const char *filepath, int flag, mode_t mode );


const char *filepath 	: 열고자 하는 파일 경로
int flag					: 파일 열 때 사용할 옵션
###
O_RDONLY 			: 읽기 모드 (Read Only)

O_WRONLY 			: 쓰기 모드 (Write Only) - 읽지 않고 쓰기만 하는 경우는 크게 많지 않음

O_RDWR 				: 읽기/쓰기 모드

O_CREAT 				: 파일 생성

O_APPEND 			: 파일을 쓰되 기존 파일의 맨 끝부터 이어 쓰는 기능

O_TRUNC 				: 파일을 초기화

O_EXCL 				: O_CREAT 와 함께 사용되며, 이미 파일이 존재한다면 에러를 리턴

mode_t mode 			: O_CREAT 옵션을 쓸 때 필수적으로 사용해야하는 옵션으로, 파일의 접근 권한을 명시
기본값 ( 파일 : 0666, 디렉토리 : 0777 )





get_next_line( int fd );
> int fd의 의미는 파일 디스크립터의 형태로 파일을 읽어들이겠다는 뜻이다.

만약 여러 개의 파일을 읽는다고 한다면 fd로 받는 것이 아니라 파일 그 자체를 받으면 되지만, fd를 통해 파일을 받게 되면 여러 개의 파일을 받을 수 있는 것.
open() 을 통해 파일을 열면 fd의 값을 반환하게 되는데, fd의 값을 일종의 주소처럼 활용하여 함수를 사용하겠다는 뜻.


#include "get_next_line.h"
// record를 동적할당하고, 문자열을 합치는 함수 추가.


// 개행을 기준으로 한 줄을 나누는 함수 추가.


// record관리 방법을 수정.


char *get_next_line(int fd)
{
    int reread;
    //버퍼사이즈만큼의 공간, record는 개행을 기준으로 나눈 문자열을 저장하기 위함.
    char buf[BUFFER_SIZE + 1];
    char *record = NULL;
    
    //파일 디스크립터는 012를 제외한 3부터의 정수.
    //read를 통해 파일을 읽고, 반환값을 저장해야함. 반환값이 0이면 파일이 끝났다는 것.
    //파일이 닫힐 때 까지 계속 while을 돌린다.
    //reread = read(fd, buf, BUFFER_SIZE);
    while((reread = read(fd, buf, BUFFER_SIZE)) > 0)
    {
        // read가 BUFFER_SIZE만큼 읽은 데이터를 record에 저장한다.
        // 만약 기존에 record의 값이 존재한다면 데이터를 이어붙인다. static variable
        
        //만약 줄내림을 발견한다면, 그 줄내림을 기준으로 앞의 문자열을 반환해야한다.
        //잘라내고 나머지 데이터는 record에 다시 저장한다. 


        if(reread == 0){
            //파일이 끝났을 때, EOF
            //record에 남아있는 데이터를 반환하고, NULL로 초기화해야한다.
        }

        if(reread == -1){
            //fd가 유효하지 않거나, 허용되지 않은 파일을 읽으려고 할 때, 
            //record를 free()하고 null을 반환해야함
        }
    }
}

